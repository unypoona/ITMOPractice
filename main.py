'''Задание датчик температуры'''
# Инициализация словаря с начальными измерениями
temperatures = {
    '2024-06-01 00:00': 22.5,
    '2024-06-01 00:05': 22.7,
    '2024-06-01 00:10': 22.6,
}

# Добавление нового измерения
new_timestamp = '2024-06-01 00:15'
new_temperature = 22.8
temperatures[new_timestamp] = new_temperature

# Получение температуры по времени
timestamp_to_check = '2024-06-01 00:05'
temperature_at_time = temperatures.get(timestamp_to_check, 'Измерение не найдено')
print(f'Температура в {timestamp_to_check}: {temperature_at_time}')

# Обновление измерения
timestamp_to_update = '2024-06-01 00:05'
corrected_temperature = 22.9
temperatures[timestamp_to_update] = corrected_temperature

# Удаление измерения
timestamp_to_delete = '2024-06-01 00:00'
if timestamp_to_delete in temperatures:
    del temperatures[timestamp_to_delete]

# Вычисление средней температуры
average_temperature = sum(temperatures.values()) / len(temperatures)
print(f'Средняя температура: {average_temperature:.2f}')
print()
print("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")

'''Задача 2. Составить программу "Счастливый билет" - 6 цифр'''


def is_lucky_ticket(ticket_number):
    if len(ticket_number) != 6 or not ticket_number.isdigit():
        return "Номер билета должен состоять из 6 цифр."

    digits = [int(num) for num in ticket_number]

    first_half_sum = sum(digits[:3])
    second_half_sum = sum(digits[3:])

    if first_half_sum == second_half_sum:
        return "Билет счастливый!"
    else:
        return "Билет не счастливый."


ticket_number = input("Введите номер билета: ")
result = is_lucky_ticket(ticket_number)
print(result)
print("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
'''
Задача. Требуется вычислить значение стоимости в зависимости от условия
Предлагается решение без применения if'''

'''Используется преобразование типа при арифметической операции
и операции сравнения'''

rate = 0.18
cost = 100
cost = cost + cost * rate * (rate > 0.13)
print(cost)  # 118.01

''' Задание 1
Для диапазона условие:
    если параметр больше 5 и меньше или равен 30, то (a - 5) * 1.2
    если параметр больше 30, то (a - 30) * 1.5'''

a = 40  # тестовое значение
y = ((a > 5) and (a <= 30)) * (a - 5) * 1.2 + (a > 30) * (a - 30) * 1.5  # укажите требуемое выражение
print(y)  # 15.0

''' Задание 2
Реализовать смену флага без if'''
n = 11
flag = n % 2 == 0
print(flag)
print("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
# Практическое занятие 2.
# Работа с данными

'''1. Составьте программу в которой объявите две строковые переменные,
например,'''
string1 = "This is a string."
string2 = " This is another string."

'''2. Проверьте работу операции «+» со строками.'''
print(string1 + string2)

'''3. Примените к любой строке следующие функции:'''
print(len(string1))  # определяет длину строки;
print(string1.title())  # преобразует первый символ каждого слова в строке к верхнему регистру;
print(string1.lower())  # символы строки преобразуются к нижнему регистру;
print(string1.upper())  # символы строки преобразуются к верхнему регистру;
print(string2.rstrip())  # удаляются пробелы в конце строки;
print(string2.lstrip())  # удаляются пробелы в начале строки;
print(string2.strip())  # удаляются пробелы с обоих концов;
print(string1.strip('0'))  # удаляются с обоих концов указанные символы в параметре функции.
print()

'''4. С помощью выражений индексирования ([]) извлеките требуемый символ,
например:'''
print(string1[2])
print()

'''5. Примените срез (slicing) для извлечения за одну операцию целого сегмента
(среза) строки (в качестве результата возвращается новый объект),
например:'''
print(string1[1:3])
print()

'''6. Проверьте другие варианты извлечения, d[1:], d[:3], d[:], d[1:5:2].'''
print(string1[1:], string1[:3], string1[:], string1[1:5:2])
print()

'''7. Попробуйте с помощью операции индексирования изменить строку,
например:'''
try:
    string1[2] = 'o'
except Exception as e:
    # Вывод информации об ошибке
    print(f"Произошла ошибка: {e}")
print()

# Работа с числами

'''2. Объявите две переменные целого типа и проверьте операции целочисленного деления, взятие остатка (%) и возведение в степень (**).'''
a = 1
b = 100500
print(a / b)
print(a % b)
print(a ** b)
print()

'''3. Проверьте работу операции «+» для строки и числа, например, введите
param = "string" + 15'''
try:
    print('some string' + a)
except Exception as e:
    # Вывод информации об ошибке
    print(f"Произошла ошибка: {e}")
print()

'''Подумайте, что нужно сделать для ее исправления.'''
print('some string' + str(a))

# Преобразование данных

'''1. Реализуйте конкатенацию – число преобразуйте к строке:'''
param = "string" + str(15)
print(param)
print()

'''2. Составьте программу, запрашивающую у пользователя два числа и
реализующую их сложение. Для этого преобразуйте строку к требуемому
числовому типу:'''
# n1 = input("Enter the first number: ")
# n2 = input("Enter the second number: ")
# n3 = float(n1) + float(n2)
# print(n1 + " plus " + n2 + " = ", n3)

# Форматирование строк
'''2. Введите в окно редактора следующий код и проанализируйте результат:'''
a = 1 / 3
print("{:7.2f}".format(a))

'''3. Проверьте форматный вывод для нескольких значений сразу:'''
a = 2 / 3
b = 2 / 9
print("{:7.3f} {:7.3f}".format(a, b))
print("{:10.3e} {:10.3e}".format(a, b))
print()

'''4. В программе прошлого раздела, (запрашивающую у пользователя два числа
и реализующую их сложение) измените способ вывода результата –
примените функцию format().'''
# n4 = input("Enter the first number: ")
# n5 = input("Enter the second number: ")
# n6 = float(n4) + float(n5)
# print(n4 + " plus " + n5 + " ===========================>>>>>> ", "{:11.3f}".format(n6))
# print()

# Списки
'''1. Создайте список произвольных чисел, например:'''
list1 = [82, 8, 23, 97, 92, 44, 17, 39, 11, 12]

'''2. Примените команду dir для просмотра методов работы со списками'''
print((dir(list)))

'''3. Вызовите справку (с помощью команды help) для методов insert, append,
sort, remove, reverse.'''
print(help(list.insert))
print(help(list.append))
print(help(list.sort))
print(help(list.remove))
print(help(list.reverse))
print()

'''4. Измените значения элементов списка (по вашему усмотрению) с помощью
операции индексирования.'''
list1[0] = 100
list1[-1] = 50
print(list1)
'''5. Добавьте новый элемент в конец списка.'''
list1.append(25)
print(list1)
'''6.Добавьте новый элемент в произвольную (на ваше усмотрение) позицию
списка.'''
list1.insert(5, 55)
print(list1)

'''7. Удалите элемент из списка по известной позиции.'''
del list1[3]
print(list1)

'''8. Удалите последний элемент из списка'''
del list1[-1]  # or list1.pop()
print(list1)
print()
# Сортировка элементов списка

'''1. Выполните сортировку списка list1 с помощью метода sort() по убыванию
(параметр reverse = True).'''
list1 = [82, 8, 23, 97, 92, 44, 17, 39, 11, 12]
list1.sort(reverse=True)
print(list1)

'''3. Создайте новый список произвольных элементов, например'''
list2 = [3, 5, 6, 2, 33, 6, 11]

'''4. Объявите новый объект (будет список) и ему присвойте результат работы
функции sorted():'''
lis = sorted(list2)
print("Исходный list2:", list2)
print("Отсортированный list2 (в lis):", lis)
print()

# Кортежи

'''1. Примените команду dir для просмотра методов работы со списками
(dir(tuple)).'''
print(dir(tuple))

'''2. Вызовите справку (с помощью команды help) для методов index, count.'''
print(help(tuple.index))
print(help(tuple.count))

'''3. Создайте кортеж произвольных чисел, например:'''
seq = (2, 8, 23, 97, 92, 44, 17, 39, 11, 12, 12, 23)

'''4. Определите, что возвращают команды:'''
print(seq.count(12))
print(seq.index(44))

'''5. Преобразуйте кортеж к типу «список»:'''
listseq = list(seq)
print(listseq)
print(listseq)

'''6. С помощью команды type(listseq) проверьте правильность преобразования.'''
print(type(listseq))

'''7. Проверьте работу основных методов, применяемых к списку для
преобразованного «кортежа».'''
listseq.append(100)  # Добавляет число 100 в конец списка
print(listseq)
listseq.insert(2, 200)  # Вставляет число 200 на позицию с индексом 2
print(listseq)
listseq.sort()  # Сортирует список по возрастанию
print(listseq)
listseq.remove(23)  # Удаляет первое вхождение числа 23 из списка
print(listseq)
listseq.pop(8)  # Удаляет элемент на позиции 8
print(listseq)
count_8 = listseq.count(12)  # Возвращает количество элементов со значением 12
print(listseq)
print(count_8)
listseq.reverse()  # Обращает порядок элементов в списке
print(listseq)

# Словари


'''1. Создайте словарь, состоящий из трех элементов (с ключами «food»
(продукт питания), «quantity» (количество) и «color» (цвет)):'''
D = {'food': 'Apple', 'quantity': 4, 'color': 'Red'}
print(D)

'''2. Проверьте возможность доступа к элементам этого словаря по ключам и
изменения значений, связанные с ключами (в квадратных скобках
указывается ключ), например:'''
D['food']
print(D)
D['quantity'] += 10
print(D)

'''3. Создайте пустой словарь:'''
dp = {}

'''4. Напишите инструкцию, заполняющую словарь значениями, вводимыми с
клавиатуры в создаваемые ‘на лету’ ключи ‘name’ и ‘age’.'''

'''
name = input("Введите ваше имя: ")
age = input("Введите ваш возраст: ")

dp['name'] = name
dp['age'] = age

print(dp)
'''
print()
# Вложенность хранения данных

'''1. Создайте словарь, реализующий требуемую структуру:'''
rec = {'name': {'firstname': 'Bob', 'lastname': 'Smith'}, 'job': ['dev', 'mgr'], 'age': 25}

'''2. Реализуйте вывод значения полного имени, отдельно имени firstname,
список должностей.'''
full_name = rec['name']['firstname'] + ' ' + rec['name']['lastname']
print("Полное имя:", full_name)
print("Firstname:", rec['name']['firstname'])
print("Список должностей:", rec['job'])

'''3. Напишите инструкцию, расширяющую список должностей, например:'''
rec['job'].append('janitor')
print(rec)

'''4. Выведите полную информацию о персоне.'''
print("Полное имя:", full_name)
print("Имя:", rec['name']['firstname'])
print("Фамилия:", rec['name']['lastname'])
print("Возраст:", rec['age'])
print("Список должностей:", rec['job'])

input()